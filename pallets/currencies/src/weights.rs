//! Autogenerated weights for module_currencies
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-04, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for module_currencies.
pub trait WeightInfo {
	fn transfer_non_native_currency() -> Weight;
	fn transfer_native_currency() -> Weight;
	fn update_balance_non_native_currency() -> Weight;
	fn update_balance_native_currency_creating() -> Weight;
	fn update_balance_native_currency_killing() -> Weight;
}

const DEFAULT_WEIGHT: u64 = 100_0000_0000;

/// Default weights.
impl WeightInfo for () {
	fn transfer_non_native_currency() -> Weight {
		Weight::from_ref_time(DEFAULT_WEIGHT)
	}
	fn transfer_native_currency() -> Weight {
		Weight::from_ref_time(DEFAULT_WEIGHT)
	}
	fn update_balance_non_native_currency() -> Weight {
		Weight::from_ref_time(DEFAULT_WEIGHT)
	}
	fn update_balance_native_currency_creating() -> Weight {
		Weight::from_ref_time(DEFAULT_WEIGHT)
	}
	fn update_balance_native_currency_killing() -> Weight {
		Weight::from_ref_time(DEFAULT_WEIGHT)
	}
}
